{
    "version": "Nuitka 1.8.1",
    "source": "Options:\n  --help                show this help message and exit\n  --version             Show version information and important details for bug\n                        reports, then exit. Defaults to off.\n  --module              Create an extension module executable instead of a\n                        program. Defaults to off.\n  --standalone          Enable standalone mode for output. This allows you to\n                        transfer the created binary to other machines without\n                        it using an existing Python installation. This also\n                        means it will become big. It implies these option: \"--\n                        follow-imports\" and \"--python-flag=no_site\". Defaults\n                        to off.\n  --onefile             On top of standalone mode, enable onefile mode. This\n                        means not a folder, but a compressed executable is\n                        created and used. Defaults to off.\n  --python-debug        Use debug version or not. Default uses what you are\n                        using to run Nuitka, most likely a non-debug version.\n  --python-flag=FLAG    Python flags to use. Default is what you are using to\n                        run Nuitka, this enforces a specific mode. These are\n                        options that also exist to standard Python executable.\n                        Currently supported: \"-S\" (alias \"no_site\"),\n                        \"static_hashes\" (do not use hash randomization),\n                        \"no_warnings\" (do not give Python run time warnings),\n                        \"-O\" (alias \"no_asserts\"), \"no_docstrings\" (do not use\n                        doc strings), \"-u\" (alias \"unbuffered\"), \"isolated\"\n                        (do not load outside code) and \"-m\" (package mode,\n                        compile as \"package.__main__\"). Default empty.\n  --python-for-scons=PATH\n                        If using Python3.3 or Python3.4, provide the path of a\n                        Python binary to use for Scons. Otherwise Nuitka can\n                        use what you run Nuitka with or a Python installation\n                        from Windows registry. On Windows Python 3.5 or higher\n                        is needed. On non-Windows, Python 2.6 or 2.7 will do\n                        as well.\n  --main=PATH           If specified once, this takes the place of the\n                        positional argument, i.e. the filename to compile.\n                        When given multiple times, it enables \"multidist\" (see\n                        User Manual) it allows you to create binaries that\n                        depending on file name or invocation name.\n\n  Control the inclusion of modules and packages in result:\n    --include-package=PACKAGE\n                        Include a whole package. Give as a Python namespace,\n                        e.g. \"some_package.sub_package\" and Nuitka will then\n                        find it and include it and all the modules found below\n                        that disk location in the binary or extension module\n                        it creates, and make it available for import by the\n                        code. To avoid unwanted sub packages, e.g. tests you\n                        can e.g. do this \"--nofollow-import-to=*.tests\".\n                        Default empty.\n    --include-module=MODULE\n                        Include a single module. Give as a Python namespace,\n                        e.g. \"some_package.some_module\" and Nuitka will then\n                        find it and include it in the binary or extension\n                        module it creates, and make it available for import by\n                        the code. Default empty.\n    --include-plugin-directory=MODULE/PACKAGE\n                        Include also the code found in that directory,\n                        considering as if they are each given as a main file.\n                        Overrides all other inclusion options. You ought to\n                        prefer other inclusion options, that go by names,\n                        rather than filenames, those find things through being\n                        in \"sys.path\". This option is for very special use\n                        cases only. Can be given multiple times. Default\n                        empty.\n    --include-plugin-files=PATTERN\n                        Include into files matching the PATTERN. Overrides all\n                        other follow options. Can be given multiple times.\n                        Default empty.\n    --prefer-source-code\n                        For already compiled extension modules, where there is\n                        both a source file and an extension module, normally\n                        the extension module is used, but it should be better\n                        to compile the module from available source code for\n                        best performance. If not desired, there is --no-\n                        prefer-source-code to disable warnings about it.\n                        Default off.\n\n  Control the following into imported modules:\n    --follow-imports    Descend into all imported modules. Defaults to on in\n                        standalone mode, otherwise off.\n    --follow-import-to=MODULE/PACKAGE\n                        Follow to that module if used, or if a package, to the\n                        whole package. Can be given multiple times. Default\n                        empty.\n    --nofollow-import-to=MODULE/PACKAGE\n                        Do not follow to that module name even if used, or if\n                        a package name, to the whole package in any case,\n                        overrides all other options. Can be given multiple\n                        times. Default empty.\n    --nofollow-imports  Do not descend into any imported modules at all,\n                        overrides all other inclusion options and not usable\n                        for standalone mode. Defaults to off.\n    --follow-stdlib     Also descend into imported modules from standard\n                        library. This will increase the compilation time by a\n                        lot and is also not well tested at this time and\n                        sometimes won't work. Defaults to off.\n\n  Onefile options:\n    --onefile-tempdir-spec=ONEFILE_TEMPDIR_SPEC\n                        Use this as a folder to unpack to in onefile mode.\n                        Defaults to '%TEMP%/onefile_%PID%_%TIME%', i.e. user\n                        temporary directory and being non-static it's removed.\n                        Use e.g. a string like\n                        '%CACHE_DIR%/%COMPANY%/%PRODUCT%/%VERSION%' which is a\n                        good static cache path, this will then not be removed.\n    --onefile-child-grace-time=GRACE_TIME_MS\n                        When stopping the child, e.g. due to CTRL-C or\n                        shutdown, etc. the Python code gets a\n                        \"KeyboardInterrupt\", that it may handle e.g. to flush\n                        data. This is the amount of time in ms, before the\n                        child it killed in the hard way. Unit is ms, and\n                        default 5000.\n    --onefile-no-compression\n                        When creating the onefile, disable compression of the\n                        payload. This is mostly for debug purposes, or to save\n                        time. Default is off.\n\n  Data files:\n    --include-package-data=PACKAGE\n                        Include data files for the given package name. DLLs\n                        and extension modules are not data files and never\n                        included like this. Can use patterns the filenames as\n                        indicated below. Data files of packages are not\n                        included by default, but package configuration can do\n                        it. This will only include non-DLL, non-extension\n                        modules, i.e. actual data files. After a \":\"\n                        optionally a filename pattern can be given as well,\n                        selecting only matching files. Examples: \"--include-\n                        package-data=package_name\" (all files) \"--include-\n                        package-data=package_name=*.txt\" (only certain type) \"\n                        --include-package-data=package_name=some_filename.dat\n                        (concrete file) Default empty.\n    --include-data-files=DESC\n                        Include data files by filenames in the distribution.\n                        There are many allowed forms. With '--include-data-\n                        files=/path/to/file/*.txt=folder_name/some.txt' it\n                        will copy a single file and complain if it's multiple.\n                        With '--include-data-\n                        files=/path/to/files/*.txt=folder_name/' it will put\n                        all matching files into that folder. For recursive\n                        copy there is a form with 3 values that '--include-\n                        data-files=/path/to/scan=folder_name=**/*.txt' that\n                        will preserve directory structure. Default empty.\n    --include-data-dir=DIRECTORY\n                        Include data files from complete directory in the\n                        distribution. This is recursive. Check '--include-\n                        data-files' with patterns if you want non-recursive\n                        inclusion. An example would be '--include-data-\n                        dir=/path/some_dir=data/some_dir' for plain copy, of\n                        the whole directory. All files are copied, if you want\n                        to exclude files you need to remove them beforehand,\n                        or use '--noinclude-data-files' option to remove them.\n                        Default empty.\n    --noinclude-data-files=PATTERN\n                        Do not include data files matching the filename\n                        pattern given. This is against the target filename,\n                        not source paths. So to ignore a file pattern from\n                        package data for \"package_name\" should be matched as\n                        \"package_name/*.txt\". Or for the whole directory\n                        simply use \"package_name\". Default empty.\n    --list-package-data=LIST_PACKAGE_DATA\n                        Output the data files found for a given package name.\n                        Default not done.\n\n  Metadata support:\n    --include-distribution-metadata=DISTRIBUTION\n                        Include metadata information for the given\n                        distribution name. Some packages check metadata for\n                        presence, version, entry points, etc. and without this\n                        option given, it only works when it's recognized at\n                        compile time which is not always happening. This of\n                        course only makes sense for packages that are included\n                        in the compilation. Default empty.\n\n  DLL files:\n    --noinclude-dlls=PATTERN\n                        Do not include DLL files matching the filename pattern\n                        given. This is against the target filename, not source\n                        paths. So ignore a DLL \"someDLL\" contained in the\n                        package \"package_name\" it should be matched as\n                        \"package_name/someDLL.*\". Default empty.\n    --list-package-dlls=LIST_PACKAGE_DLLS\n                        Output the DLLs found for a given package name.\n                        Default not done.\n\n  Control the warnings to be given by Nuitka:\n    --warn-implicit-exceptions\n                        Enable warnings for implicit exceptions detected at\n                        compile time.\n    --warn-unusual-code\n                        Enable warnings for unusual code detected at compile\n                        time.\n    --assume-yes-for-downloads\n                        Allow Nuitka to download external code if necessary,\n                        e.g. dependency walker, ccache, and even gcc on\n                        Windows. To disable, redirect input from nul device,\n                        e.g. \"</dev/null\" or \"<NUL:\". Default is to prompt.\n    --nowarn-mnemonic=MNEMONIC\n                        Disable warning for a given mnemonic. These are given\n                        to make sure you are aware of certain topics, and\n                        typically point to the Nuitka website. The mnemonic is\n                        the part of the URL at the end, without the HTML\n                        suffix. Can be given multiple times and accepts shell\n                        pattern. Default empty.\n\n  Immediate execution after compilation:\n    --run               Execute immediately the created binary (or import the\n                        compiled module). Defaults to off.\n    --debugger          Execute inside a debugger, e.g. \"gdb\" or \"lldb\" to\n                        automatically get a stack trace. Defaults to off.\n    --execute-with-pythonpath\n                        When immediately executing the created binary or\n                        module using '--run', don't reset 'PYTHONPATH'\n                        environment. When all modules are successfully\n                        included, you ought to not need PYTHONPATH anymore,\n                        and definitely not for standalone mode.\n\n  Compilation choices:\n    --user-package-configuration-file=YAML_FILENAME\n                        User provided Yaml file with package configuration.\n                        You can include DLLs, remove bloat, add hidden\n                        dependencies. Check User Manual for a complete\n                        description of the format to use. Can be given\n                        multiple times. Defaults to empty.\n    --full-compat       Enforce absolute compatibility with CPython. Do not\n                        even allow minor deviations from CPython behavior,\n                        e.g. not having better tracebacks or exception\n                        messages which are not really incompatible, but only\n                        different or worse. This is intended for tests only\n                        and should *not* be used.\n    --file-reference-choice=MODE\n                        Select what value \"__file__\" is going to be. With\n                        \"runtime\" (default for standalone binary mode and\n                        module mode), the created binaries and modules, use\n                        the location of themselves to deduct the value of\n                        \"__file__\". Included packages pretend to be in\n                        directories below that location. This allows you to\n                        include data files in deployments. If you merely seek\n                        acceleration, it's better for you to use the\n                        \"original\" value, where the source files location will\n                        be used. With \"frozen\" a notation \"<frozen\n                        module_name>\" is used. For compatibility reasons, the\n                        \"__file__\" value will always have \".py\" suffix\n                        independent of what it really is.\n    --module-name-choice=MODE\n                        Select what value \"__name__\" and \"__package__\" are\n                        going to be. With \"runtime\" (default for module mode),\n                        the created module uses the parent package to deduce\n                        the value of \"__package__\", to be fully compatible.\n                        The value \"original\" (default for other modes) allows\n                        for more static optimization to happen, but is\n                        incompatible for modules that normally can be loaded\n                        into any package.\n\n  Output choices:\n    --output-filename=FILENAME\n                        Specify how the executable should be named. For\n                        extension modules there is no choice, also not for\n                        standalone mode and using it will be an error. This\n                        may include path information that needs to exist\n                        though. Defaults to '<program_name>' on this platform.\n                        .exe\n    --output-dir=DIRECTORY\n                        Specify where intermediate and final output files\n                        should be put. The DIRECTORY will be populated with\n                        build folder, dist folder, binaries, etc. Defaults to\n                        current directory.\n    --remove-output     Removes the build directory after producing the module\n                        or exe file. Defaults to off.\n    --no-pyi-file       Do not create a \".pyi\" file for extension modules\n                        created by Nuitka. This is used to detect implicit\n                        imports. Defaults to off.\n\n  Debug features:\n    --debug             Executing all self checks possible to find errors in\n                        Nuitka, do not use for production. Defaults to off.\n    --unstripped        Keep debug info in the resulting object file for\n                        better debugger interaction. Defaults to off.\n    --profile           Enable vmprof based profiling of time spent. Not\n                        working currently. Defaults to off.\n    --internal-graph    Create graph of optimization process internals, do not\n                        use for whole programs, but only for small test cases.\n                        Defaults to off.\n    --trace-execution   Traced execution output, output the line of code\n                        before executing it. Defaults to off.\n    --recompile-c-only  This is not incremental compilation, but for Nuitka\n                        development only. Takes existing files and simply\n                        compile them as C again. Allows compiling edited C\n                        files for quick debugging changes to the generated\n                        source, e.g. to see if code is passed by, values\n                        output, etc, Defaults to off. Depends on compiling\n                        Python source to determine which files it should look\n                        at.\n    --xml=XML_FILENAME  Write the internal program structure, result of\n                        optimization in XML form to given filename.\n    --deployment        Disable code aimed at making finding compatibility\n                        issues easier. This will e.g. prevent execution with\n                        \"-c\" argument, which is often used by code that\n                        attempts run a module, and causes a program to start\n                        itself over and over potentially. Default off.\n    --no-deployment-flag=FLAG\n                        Keep deployment mode, but disable selectively parts of\n                        it. Errors from deployment mode will output these\n                        identifiers. Default empty.\n    --experimental=FLAG\n                        Use features declared as 'experimental'. May have no\n                        effect if no experimental features are present in the\n                        code. Uses secret tags (check source) per experimented\n                        feature.\n    --low-memory        Attempt to use less memory, by forking less C\n                        compilation jobs and using options that use less\n                        memory. For use on embedded machines. Use this in case\n                        of out of memory problems. Defaults to off.\n    --create-environment-from-report=CREATE_ENVIRONMENT_FROM_REPORT\n                        Create a new virtualenv in that non-existing path from\n                        the report file given with e.g. '--report=compilation-\n                        report.xml'. Default not done.\n    --generate-c-only   Generate only C source code, and do not compile it to\n                        binary or module. This is for debugging and code\n                        coverage analysis that doesn't waste CPU. Defaults to\n                        off. Do not think you can use this directly.\n\n  Backend C compiler choice:\n    --clang             Enforce the use of clang. On Windows this requires a\n                        working Visual Studio version to piggy back on.\n                        Defaults to off.\n    --mingw64           Enforce the use of MinGW64 on Windows. Defaults to off\n                        unless MSYS2 with MinGW Python is used.\n    --msvc=MSVC_VERSION\n                        Enforce the use of specific MSVC version on Windows.\n                        Allowed values are e.g. \"14.3\" (MSVC 2022) and other\n                        MSVC version numbers, specify \"list\" for a list of\n                        installed compilers, or use \"latest\".  Defaults to\n                        latest MSVC being used if installed, otherwise MinGW64\n                        is used.\n    --jobs=N            Specify the allowed number of parallel C compiler\n                        jobs. Defaults to the system CPU count.\n    --lto=choice        Use link time optimizations (MSVC, gcc, clang).\n                        Allowed values are \"yes\", \"no\", and \"auto\" (when it's\n                        known to work). Defaults to \"auto\".\n    --static-libpython=choice\n                        Use static link library of Python. Allowed values are\n                        \"yes\", \"no\", and \"auto\" (when it's known to work).\n                        Defaults to \"auto\".\n\n  Cache Control:\n    --disable-cache=DISABLED_CACHES\n                        Disable selected caches, specify \"all\" for all cached.\n                        Currently allowed values are:\n                        \"all\",\"ccache\",\"bytecode\",\"dll-dependencies\". can be\n                        given multiple times or with comma separated values.\n                        Default none.\n    --clean-cache=CLEAN_CACHES\n                        Clean the given caches before executing, specify \"all\"\n                        for all cached. Currently allowed values are:\n                        \"all\",\"ccache\",\"bytecode\",\"dll-dependencies\". can be\n                        given multiple times or with comma separated values.\n                        Default none.\n    --disable-bytecode-cache\n                        Do not reuse dependency analysis results for modules,\n                        esp. from standard library, that are included as\n                        bytecode. Same as --disable-cache=bytecode.\n    --disable-ccache    Do not attempt to use ccache (gcc, clang, etc.) or\n                        clcache (MSVC, clangcl). Same as --disable-\n                        cache=ccache.\n    --disable-dll-dependency-cache\n                        Disable the dependency walker cache. Will result in\n                        much longer times to create the distribution folder,\n                        but might be used in case the cache is suspect to\n                        cause errors. Same as --disable-cache=dll-\n                        dependencies.\n    --force-dll-dependency-cache-update\n                        For an update of the dependency walker cache. Will\n                        result in much longer times to create the distribution\n                        folder, but might be used in case the cache is suspect\n                        to cause errors or known to need an update.\n\n  PGO compilation choices:\n    --pgo               Enables C level profile guided optimization (PGO), by\n                        executing a dedicated build first for a profiling run,\n                        and then using the result to feedback into the C\n                        compilation. Note: This is experimental and not\n                        working with standalone modes of Nuitka yet. Defaults\n                        to off.\n    --pgo-args=PGO_ARGS\n                        Arguments to be passed in case of profile guided\n                        optimization. These are passed to the special built\n                        executable during the PGO profiling run. Default\n                        empty.\n    --pgo-executable=PGO_EXECUTABLE\n                        Command to execute when collecting profile\n                        information. Use this only, if you need to launch it\n                        through a script that prepares it to run. Default use\n                        created program.\n\n  Tracing features:\n    --report=REPORT_FILENAME\n                        Report module, data files, compilation, plugin, etc.\n                        details in an XML output file. This is also super\n                        useful for issue reporting. These reports can e.g. be\n                        used to re-create the environment easily using it with\n                        '--create-environment-from-report', but contain a lot\n                        of information. Default is off.\n    --report-diffable   Report data in diffable form, i.e. no timing or memory\n                        usage values that vary from run to run. Default is\n                        off.\n    --report-user-provided=KEY_VALUE\n                        Report data from you. This can be given multiple times\n                        and be anything in 'key=value' form, where key should\n                        be an identifier, e.g. use '--report-user-\n                        provided=pipenv-lock-hash=64a5e4' to track some input\n                        values. Default is empty.\n    --report-template=REPORT_DESC\n                        Report via template. Provide template and output\n                        filename \"template.rst.j2:output.rst\". For built-in\n                        templates, check the User Manual for what these are.\n                        Can be given multiple times. Default is empty.\n    --quiet             Disable all information outputs, but show warnings.\n                        Defaults to off.\n    --show-scons        Run the C building backend Scons with verbose\n                        information, showing the executed commands, detected\n                        compilers. Defaults to off.\n    --no-progressbar    Disable progress bars. Defaults to off.\n    --show-progress     Obsolete: Provide progress information and statistics.\n                        Disables normal progress bar. Defaults to off.\n    --show-memory       Provide memory information and statistics. Defaults to\n                        off.\n    --show-modules      Provide information for included modules and DLLs\n                        Obsolete: You should use '--report' file instead.\n                        Defaults to off.\n    --show-modules-output=PATH\n                        Where to output '--show-modules', should be a\n                        filename. Default is standard output.\n    --verbose           Output details of actions taken, esp. in\n                        optimizations. Can become a lot. Defaults to off.\n    --verbose-output=PATH\n                        Where to output from '--verbose', should be a\n                        filename. Default is standard output.\n\n  General OS controls:\n    --disable-console   When compiling for Windows or macOS, disable the\n                        console window and create a GUI application. Defaults\n                        to off.\n    --enable-console    When compiling for Windows or macOS, enable the\n                        console window and create a console application. This\n                        disables hints from certain modules, e.g. \"PySide\"\n                        that suggest to disable it. Defaults to true.\n    --force-stdout-spec=FORCE_STDOUT_SPEC\n                        Force standard output of the program to go to this\n                        location. Useful for programs with disabled console\n                        and programs using the Windows Services Plugin of\n                        Nuitka commercial. Defaults to not active, use e.g.\n                        '%PROGRAM_BASE%.out.txt', i.e. file near your program,\n                        check User Manual for full list of available values.\n    --force-stderr-spec=FORCE_STDERR_SPEC\n                        Force standard error of the program to go to this\n                        location. Useful for programs with disabled console\n                        and programs using the Windows Services Plugin of\n                        Nuitka commercial. Defaults to not active, use e.g.\n                        '%PROGRAM_BASE%.err.txt', i.e. file near your program,\n                        check User Manual for full list of available values.\n\n  Windows specific controls:\n    --windows-icon-from-ico=ICON_PATH\n                        Add executable icon. Can be given multiple times for\n                        different resolutions or files with multiple icons\n                        inside. In the later case, you may also suffix with\n                        #<n> where n is an integer index starting from 1,\n                        specifying a specific icon to be included, and all\n                        others to be ignored.\n    --windows-icon-from-exe=ICON_EXE_PATH\n                        Copy executable icons from this existing executable\n                        (Windows only).\n    --onefile-windows-splash-screen-image=SPLASH_SCREEN_IMAGE\n                        When compiling for Windows and onefile, show this\n                        while loading the application. Defaults to off.\n    --windows-uac-admin\n                        Request Windows User Control, to grant admin rights on\n                        execution. (Windows only). Defaults to off.\n    --windows-uac-uiaccess\n                        Request Windows User Control, to enforce running from\n                        a few folders only, remote desktop access. (Windows\n                        only). Defaults to off.\n\n  macOS specific controls:\n    --macos-target-arch=MACOS_TARGET_ARCH\n                        What architectures is this to supposed to run on.\n                        Default and limit is what the running Python allows\n                        for. Default is \"native\" which is the architecture the\n                        Python is run with.\n    --macos-create-app-bundle\n                        When compiling for macOS, create a bundle rather than\n                        a plain binary application. Currently experimental and\n                        incomplete. Currently this is the only way to unlock\n                        disabling of console.Defaults to off.\n    --macos-app-icon=ICON_PATH\n                        Add icon for the application bundle to use. Can be\n                        given only one time. Defaults to Python icon if\n                        available.\n    --macos-signed-app-name=MACOS_SIGNED_APP_NAME\n                        Name of the application to use for macOS signing.\n                        Follow \"com.YourCompany.AppName\" naming results for\n                        best results, as these have to be globally unique, and\n                        will potentially grant protected API accesses.\n    --macos-app-name=MACOS_APP_NAME\n                        Name of the product to use in macOS bundle\n                        information. Defaults to base filename of the binary.\n    --macos-app-mode=MODE\n                        Mode of application for the application bundle. When\n                        launching a Window, and appearing in Docker is\n                        desired, default value \"gui\" is a good fit. Without a\n                        Window ever, the application is a \"background\"\n                        application. For UI elements that get to display\n                        later, \"ui-element\" is in-between. The application\n                        will not appear in dock, but get full access to\n                        desktop when it does open a Window later.\n    --macos-sign-identity=MACOS_APP_VERSION\n                        When signing on macOS, by default an ad-hoc identify\n                        will be used, but with this option your get to specify\n                        another identity to use. The signing of code is now\n                        mandatory on macOS and cannot be disabled. Default\n                        \"ad-hoc\" if not given.\n    --macos-sign-notarization\n                        When signing for notarization, using a proper TeamID\n                        identity from Apple, use the required runtime signing\n                        option, such that it can be accepted.\n    --macos-app-version=MACOS_APP_VERSION\n                        Product version to use in macOS bundle information.\n                        Defaults to \"1.0\" if not given.\n    --macos-app-protected-resource=RESOURCE_DESC\n                        Request an entitlement for access to a macOS protected\n                        resources, e.g.\n                        \"NSMicrophoneUsageDescription:Microphone access for\n                        recording audio.\" requests access to the microphone\n                        and provides an informative text for the user, why\n                        that is needed. Before the colon, is an OS identifier\n                        for an access right, then the informative text. Legal\n                        values can be found on https://developer.apple.com/doc\n                        umentation/bundleresources/information_property_list/p\n                        rotected_resources and the option can be specified\n                        multiple times. Default empty.\n\n  Linux specific controls:\n    --linux-icon=ICON_PATH\n                        Add executable icon for onefile binary to use. Can be\n                        given only one time. Defaults to Python icon if\n                        available.\n\n  Binary Version Information:\n    --company-name=COMPANY_NAME\n                        Name of the company to use in version information.\n                        Defaults to unused.\n    --product-name=PRODUCT_NAME\n                        Name of the product to use in version information.\n                        Defaults to base filename of the binary.\n    --file-version=FILE_VERSION\n                        File version to use in version information. Must be a\n                        sequence of up to 4 numbers, e.g. 1.0 or 1.0.0.0, no\n                        more digits are allowed, no strings are allowed.\n                        Defaults to unused.\n    --product-version=PRODUCT_VERSION\n                        Product version to use in version information. Same\n                        rules as for file version. Defaults to unused.\n    --file-description=FILE_DESCRIPTION\n                        Description of the file used in version information.\n                        Windows only at this time. Defaults to binary\n                        filename.\n    --copyright=COPYRIGHT_TEXT\n                        Copyright used in version information. Windows only at\n                        this time. Defaults to not present.\n    --trademarks=TRADEMARK_TEXT\n                        Trademark used in version information. Windows only at\n                        this time. Defaults to not present.\n\n  Plugin control:\n    --enable-plugins=PLUGIN_NAME\n                        Enabled plugins. Must be plug-in names. Use '--plugin-\n                        list' to query the full list and exit. Default empty.\n    --disable-plugins=PLUGIN_NAME\n                        Disabled plugins. Must be plug-in names. Use '--\n                        plugin-list' to query the full list and exit. Most\n                        standard plugins are not a good idea to disable.\n                        Default empty.\n    --plugin-no-detection\n                        Plugins can detect if they might be used, and the you\n                        can disable the warning via \"--disable-plugin=plugin-\n                        that-warned\", or you can use this option to disable\n                        the mechanism entirely, which also speeds up\n                        compilation slightly of course as this detection code\n                        is run in vain once you are certain of which plugins\n                        to use. Defaults to off.\n    --plugin-list       Show list of all available plugins and exit. Defaults\n                        to off.\n    --user-plugin=PATH  The file name of user plugin. Can be given multiple\n                        times. Default empty.\n    --show-source-changes\n                        Show source changes to original Python file content\n                        before compilation. Mostly intended for developing\n                        plugins. Default False.\n\n  Plugin options of 'anti-bloat':\n    --show-anti-bloat-changes\n                        Annotate what changes are by the plugin done.\n    --noinclude-setuptools-mode=NOINCLUDE_SETUPTOOLS_MODE\n                        What to do if a 'setuptools' or import is encountered.\n                        This package can be big with dependencies, and should\n                        definitely be avoided. Also handles 'setuptools_scm'.\n    --noinclude-pytest-mode=NOINCLUDE_PYTEST_MODE\n                        What to do if a 'pytest' import is encountered. This\n                        package can be big with dependencies, and should\n                        definitely be avoided. Also handles 'nose' imports.\n    --noinclude-unittest-mode=NOINCLUDE_UNITTEST_MODE\n                        What to do if a unittest import is encountered. This\n                        package can be big with dependencies, and should\n                        definitely be avoided.\n    --noinclude-IPython-mode=NOINCLUDE_IPYTHON_MODE\n                        What to do if a IPython import is encountered. This\n                        package can be big with dependencies, and should\n                        definitely be avoided.\n    --noinclude-dask-mode=NOINCLUDE_DASK_MODE\n                        What to do if a 'dask' import is encountered. This\n                        package can be big with dependencies, and should\n                        definitely be avoided.\n    --noinclude-numba-mode=NOINCLUDE_NUMBA_MODE\n                        What to do if a 'numba' import is encountered. This\n                        package can be big with dependencies, and is currently\n                        not working for standalone. This package is big with\n                        dependencies, and should definitely be avoided.\n    --noinclude-default-mode=NOINCLUDE_DEFAULT_MODE\n                        This actually provides the default \"warning\" value for\n                        above options, and can be used to turn all of these\n                        on.\n    --noinclude-custom-mode=CUSTOM_CHOICES\n                        What to do if a specific import is encountered. Format\n                        is module name, which can and should be a top level\n                        package and then one choice, \"error\", \"warning\",\n                        \"nofollow\", e.g. PyQt5:error."
}